[{"/Users/raghavbhalla/Projects/React/waveMusic/react-player/src/index.js":"1","/Users/raghavbhalla/Projects/React/waveMusic/react-player/src/App.js":"2","/Users/raghavbhalla/Projects/React/waveMusic/react-player/src/reportWebVitals.js":"3","/Users/raghavbhalla/Projects/React/waveMusic/react-player/src/components/Player.js":"4","/Users/raghavbhalla/Projects/React/waveMusic/react-player/src/components/Song.js":"5","/Users/raghavbhalla/Projects/React/waveMusic/react-player/src/util.js":"6","/Users/raghavbhalla/Projects/React/waveMusic/react-player/src/components/Library.js":"7","/Users/raghavbhalla/Projects/React/waveMusic/react-player/src/components/LibrarySong.js":"8","/Users/raghavbhalla/Projects/React/waveMusic/react-player/src/components/Nav.js":"9"},{"size":478,"mtime":1608094866424,"results":"10","hashOfConfig":"11"},{"size":1226,"mtime":1608266900361,"results":"12","hashOfConfig":"11"},{"size":362,"mtime":1607903430144,"results":"13","hashOfConfig":"11"},{"size":3351,"mtime":1608265343904,"results":"14","hashOfConfig":"11"},{"size":288,"mtime":1608094861622,"results":"15","hashOfConfig":"11"},{"size":2151,"mtime":1607916482718,"results":"16","hashOfConfig":"11"},{"size":605,"mtime":1608096021345,"results":"17","hashOfConfig":"11"},{"size":719,"mtime":1608265155343,"results":"18","hashOfConfig":"11"},{"size":479,"mtime":1608095693444,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"1j9vl4o",{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"22"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"22"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"22"},"/Users/raghavbhalla/Projects/React/waveMusic/react-player/src/index.js",[],["42","43"],"/Users/raghavbhalla/Projects/React/waveMusic/react-player/src/App.js",["44"],"/Users/raghavbhalla/Projects/React/waveMusic/react-player/src/reportWebVitals.js",[],"/Users/raghavbhalla/Projects/React/waveMusic/react-player/src/components/Player.js",["45"],"import React, { useRef, useState, useEffect } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faPlay,\n  faAngleLeft,\n  faAngleRight,\n  faPause,\n} from \"@fortawesome/free-solid-svg-icons\";\n\nconst Player = ({\n  setCurrentSong,\n  songs,\n  currentSong,\n  setIsPlaying,\n  isPlaying,\n  setSongs,\n}) => {\n  //Ref\n  const audioRef = useRef(null);\n  // useEffect\n  useEffect(() => {\n    const newSongs = songs.map((song) =>\n      song.id === currentSong.id\n        ? { ...song, active: true }\n        : { ...song, active: false }\n    );\n    setSongs(newSongs);\n  }, [currentSong]);\n  //event handlers\n\n  const dragHandler = (e) => {\n    audioRef.current.currentTime = e.target.value;\n    setSongInfo({ ...songInfo, currentTime: e.target.value });\n  };\n  const playSongHandler = () => {\n    if (isPlaying) {\n      audioRef.current.pause();\n      setIsPlaying(!isPlaying);\n    } else {\n      audioRef.current.play();\n      setIsPlaying(!isPlaying);\n    }\n  };\n  const skipTrackHandler = async (direction) => {\n    let currentIndex = songs.findIndex((song) => song.id === currentSong.id);\n    if (direction === \"skip-forward\") {\n      await setCurrentSong(songs[(currentIndex + 1) % songs.length]);\n    }\n    if (direction === \"skip-back\") {\n      if ((currentIndex - 1) % songs.length === -1) {\n        setCurrentSong(songs[songs.length - 1]);\n        return;\n      }\n      setCurrentSong(songs[(currentIndex - 1) % songs.length]);\n    }\n    if (isPlaying) audioRef.current.play();\n  };\n  const timeUpdateHandler = (e) => {\n    const current = e.target.currentTime;\n    const duration = e.target.duration;\n    //calculate percentage\n\n    setSongInfo({\n      ...songInfo,\n      currentTime: current,\n      duration,\n    });\n  };\n  const getTime = (time) => {\n    return (\n      Math.floor(time / 60) + \":\" + (\"0\" + Math.floor(time % 60)).slice(-2)\n    );\n  };\n  const autoPlayHandler = () => {\n    if (isPlaying) {\n      audioRef.current.play();\n    }\n  };\n  //State\n  const [songInfo, setSongInfo] = useState({\n    currentTime: 0,\n    duration: 0,\n    animationPercentage: 0,\n  });\n\n  return (\n    <div className=\"player\">\n      <div className=\"time-control\">\n        <p>{getTime(songInfo.currentTime)}</p>\n        <input\n          onChange={dragHandler}\n          min={0}\n          max={songInfo.duration || 0}\n          value={songInfo.currentTime}\n          type=\"range\"\n        />\n        <p>{getTime(songInfo.duration)}</p>\n      </div>\n      <div className=\"play-control\">\n        <FontAwesomeIcon\n          className=\"skip-back\"\n          size=\"2x\"\n          icon={faAngleLeft}\n          onClick={() => skipTrackHandler(\"skip-back\")}\n        />\n        <FontAwesomeIcon\n          className=\"play\"\n          onClick={playSongHandler}\n          size=\"2x\"\n          icon={isPlaying ? faPause : faPlay}\n        />\n        <FontAwesomeIcon\n          className=\"skip-forward\"\n          size=\"2x\"\n          icon={faAngleRight}\n          onClick={() => skipTrackHandler(\"skip-forward\")}\n        />\n      </div>\n      <audio\n        ref={audioRef}\n        onLoadedData={autoPlayHandler}\n        onTimeUpdate={timeUpdateHandler}\n        onLoadedMetadata={timeUpdateHandler}\n        src={currentSong.audio}\n        onEnded={() => skipTrackHandler(\"skip-forward\")}\n      ></audio>\n    </div>\n  );\n};\n\nexport default Player;\n","/Users/raghavbhalla/Projects/React/waveMusic/react-player/src/components/Song.js",[],"/Users/raghavbhalla/Projects/React/waveMusic/react-player/src/util.js",[],"/Users/raghavbhalla/Projects/React/waveMusic/react-player/src/components/Library.js",[],"/Users/raghavbhalla/Projects/React/waveMusic/react-player/src/components/LibrarySong.js",["46","47"],"import { React, useRef } from \"react\";\nimport Song from \"./Song\";\n\nconst LibrarySong = ({ song, songs, setCurrentSong, id, setSongs }) => {\n  const songSelectHandler = () => {\n    setCurrentSong(song);\n    //add active state\n    const newSongs = songs.map((song) =>\n      song.id === id ? { ...song, active: true } : { ...song, active: false }\n    );\n    setSongs(newSongs);\n  };\n  return (\n    <div\n      onClick={songSelectHandler}\n      className={`library-song ${song.active ? \"selected\" : \"\"}`}\n    >\n      <img src={song.cover} alt={song.name}></img>\n      <div className=\"song-description\">\n        <h3>{song.name}</h3>\n        <h4>{song.artist}</h4>\n      </div>\n    </div>\n  );\n};\n\nexport default LibrarySong;\n","/Users/raghavbhalla/Projects/React/waveMusic/react-player/src/components/Nav.js",["48","49"],"import React from \"react\";\nimport {\n  fontAwesomeIcon,\n  FontAwesomeIcon,\n} from \"@fortawesome/react-fontawesome\";\nimport {\n  faMusic,\n  faArrowAltCircleDown,\n} from \"@fortawesome/free-solid-svg-icons\";\n\nconst Nav = ({ libraryStatus, setLibraryStatus }) => {\n  return (\n    <nav>\n      <h1>Waves</h1>\n      <button onClick={() => setLibraryStatus(!libraryStatus)}>\n        Libary\n        <FontAwesomeIcon icon={faMusic} />\n      </button>\n    </nav>\n  );\n};\n\nexport default Nav;\n",{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","severity":1,"message":"55","line":9,"column":8,"nodeType":"56","messageId":"57","endLine":9,"endColumn":19},{"ruleId":"58","severity":1,"message":"59","line":28,"column":6,"nodeType":"60","endLine":28,"endColumn":19,"suggestions":"61"},{"ruleId":"54","severity":1,"message":"62","line":1,"column":17,"nodeType":"56","messageId":"57","endLine":1,"endColumn":23},{"ruleId":"54","severity":1,"message":"63","line":2,"column":8,"nodeType":"56","messageId":"57","endLine":2,"endColumn":12},{"ruleId":"54","severity":1,"message":"64","line":3,"column":3,"nodeType":"56","messageId":"57","endLine":3,"endColumn":18},{"ruleId":"54","severity":1,"message":"65","line":8,"column":3,"nodeType":"56","messageId":"57","endLine":8,"endColumn":23},"no-native-reassign",["66"],"no-negated-in-lhs",["67"],"no-unused-vars","'LibrarySong' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'setSongs' and 'songs'. Either include them or remove the dependency array. If 'setSongs' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["68"],"'useRef' is defined but never used.","'Song' is defined but never used.","'fontAwesomeIcon' is defined but never used.","'faArrowAltCircleDown' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"69","fix":"70"},"Update the dependencies array to be: [currentSong, setSongs, songs]",{"range":"71","text":"72"},[600,613],"[currentSong, setSongs, songs]"]